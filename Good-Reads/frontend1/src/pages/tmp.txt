app.get("/friends-ratings", async (req, res) => {
  const user_id = req.session.userId;
  // console.log(req.session,user_id); // Debugging line
  if (!user_id) {
    console.log("User not logged in"); // Debugging line
    return res.status(401).json({ error: "Not logged in" });
  }

  try {
    const result = await pool.query(`
      WITH friends AS (
        SELECT user2_id AS friend_id FROM Friendship 
        WHERE user1_id = $1 AND status = 'accepted'
        UNION
        SELECT user1_id AS friend_id FROM Friendship 
        WHERE user2_id = $1 AND status = 'accepted'
      )
      SELECT 
        r.rating_value AS rating,
        r.timestamp,
        u.username,
        u.user_id,
        c.item_id AS content_id,
        c.title,
        c.content_type
      FROM Rating r
      JOIN friends f ON r.user_id = f.friend_id
      JOIN Users u ON u.user_id = r.user_id
      JOIN ContentItem c ON c.item_id = r.item_id
      WHERE r.timestamp >= now() - INTERVAL '7 days'
        AND r.is_private = FALSE
        AND u.is_rating_private = 0
      ORDER BY r.timestamp DESC
    `, [user_id]);
      // console.log("Result:", result.rows); // Debugging line
    res.json(result.rows);
  } catch (err) {
    console.error("Error in /friends-ratings:", err);
    res.status(500).json({ error: "Server error" });
  }
});


app.get("/friends-reviews", async (req, res) => {
  const userId = req.session.userId;
  if (!userId) return res.status(401).json({ error: "Not logged in" });

  try {
    const result = await pool.query(`
      WITH friends AS (
        SELECT user2_id AS friend_id FROM Friendship 
        WHERE user1_id = $1 AND status = 'accepted'
        UNION
        SELECT user1_id AS friend_id FROM Friendship 
        WHERE user2_id = $1 AND status = 'accepted'
      )
      SELECT 
        rv.text AS review,
        rv.timestamp,
        u.username,
        u.user_id,
        c.item_id AS content_id,
        c.title,
        c.content_type,
        rv.sentiment_score
      FROM Review rv
      JOIN friends f ON rv.user_id = f.friend_id
      JOIN Users u ON u.user_id = rv.user_id
      JOIN ContentItem c ON c.item_id = rv.item_id
      WHERE rv.timestamp >= now() - INTERVAL '7 days'
        AND u.is_review_private = 0
      ORDER BY rv.timestamp DESC
    `, [userId]);

    res.json(result.rows);
  } catch (err) {
    console.error("Error in /friends-reviews:", err);
    res.status(500).json({ error: "Server error" });
  }
});



app.get("/content/:type", async (req, res) => {
  const { type } = req.params;
  const canonicalType = typeMap[type?.toLowerCase()];
  if (!canonicalType) {
    return res.status(400).json({ error: "Invalid content type" });
  }

  const userId = req.session.userId; // undefined if not logged in

  // — Recommendation branch for logged‑in users —
  if (userId) {
    const client = await pool.connect();
    try {
      // 1) Pull the user's ratings for this content_type
      const { rows: userRatings } = await client.query(`
        SELECT r.item_id, r.rating_value
        FROM Rating r
        JOIN ContentItem ci ON ci.item_id = r.item_id
        WHERE r.user_id = $1
          AND ci.content_type = $2
      `, [userId, canonicalType]);
      console.log(`Fetched ${userRatings.length} ratings for user ${userId} and type ${canonicalType}`);

      // 2) Pull all items of this type
      const { rows: items } = await client.query(`
        SELECT
          ci.item_id,
          ci.title,
          ci.description,
          ci.content_type,
          ci.release_date,
          ci.image_url,
          g.name                AS genre_name,
          COALESCE(AVG(r.rating_value), 0)      AS rating,
          COALESCE(AVG(rev.sentiment_score), 0) AS average_sentiment
        FROM ContentItem ci
        JOIN Genre g ON g.genre_id = ci.genre_id
        LEFT JOIN Rating r   ON r.item_id    = ci.item_id
        LEFT JOIN Review rev ON rev.item_id  = ci.item_id
        WHERE ci.content_type = $1
        GROUP BY
          ci.item_id, ci.title, ci.description,
          ci.content_type, ci.release_date,
          ci.image_url, g.name
      `, [canonicalType]);
      console.log(`Fetched ${items.length} items of type ${canonicalType}`);

      // 3) Build TF‑IDF model over descriptions
      const tfidf = new natural.TfIdf();
      items.forEach(it =>
        tfidf.addDocument(it.description || '', String(it.item_id))
      );

      // 4) Build a global vocabulary from tfidf.listTerms()
      const termSet = new Set();
      items.forEach((_, idx) => {
        tfidf.listTerms(idx).forEach(({ term }) => {
          termSet.add(term);
        });
      });
      const vocab = Array.from(termSet);

      // 5) One‑hot encode genres
      const genreIds   = _.uniq(items.map(it => it.genre_id));
      const genreIndex = Object.fromEntries(genreIds.map((g, i) => [g, i]));

      const normalize = vec => {
        const magnitude = Math.sqrt(vec.reduce((sum, val) => sum + val * val, 0));
        return magnitude ? vec.map(val => val / magnitude) : vec;
      };

      // 6) Vectorize each item: [TF‑IDF … , one‑hot genre …]
      const itemVectors = items.map((it, idx) => {
        // TF‑IDF vector
        const descVec = normalize(vocab.map(term => tfidf.tfidf(term, idx)));

        // Genre one‑hot
        genreVec = Array(genreIds.length).fill(0);
        genreVec[genreIndex[it.genre_id]] = 1;

        // Scale the genre vector by the weight
        const genreWeight = 2.0; // Adjust this weight as needed
        genreVec = genreVec.map(value => value * genreWeight);

        return {
          item_id:    it.item_id,
          title:      it.title,
          description:it.description,
          genre:      it.genre_name,
          image_url:  it.image_url,
          vector:     [...descVec, ...genreVec],
        };
      });
      console.log(`Vectorized ${itemVectors.length} items`);

      // 7) If no ratings, fall back to original full listing
      if (!userRatings.length) {
        console.log("No ratings found for user, falling back to all items.");
        const fallback = await client.query(`
          SELECT
          ci.item_id,
          ci.title,
          ci.description,
          ci.content_type,
          ci.release_date,
          ci.image_url,
          g.name                AS genre_name,
          COALESCE(AVG(r.rating_value), 0)      AS rating,
          COALESCE(AVG(rev.sentiment_score), 0) AS average_sentiment
        FROM ContentItem ci
        JOIN Genre g ON g.genre_id = ci.genre_id
        LEFT JOIN Rating r   ON r.item_id    = ci.item_id
        LEFT JOIN Review rev ON rev.item_id  = ci.item_id
        WHERE ci.content_type = $1
        GROUP BY
          ci.item_id, ci.title, ci.description,
          ci.content_type, ci.release_date,
          ci.image_url, g.name
        `, [canonicalType]);
        return res.json(fallback.rows);
      }

      // 1) Choose which ratings to use (either high ratings ≥3, or fallback to all)
      const liked  = userRatings.filter(r => r.rating_value >= 3);
      const toUse  = liked.length > 0 ? liked : userRatings;

      // 2) Build weighted vectors
      const weighted = toUse.map(r => {
        const iv = itemVectors.find(iv => iv.item_id === r.item_id);
        return iv.vector.map(value => value * r.rating_value);
      });

      // 3) Compute userProfile by averaging each dimension
      //    Notice we rename the callback args so `_` remains Lodash
      const userProfile = weighted[0].map((__element, idx) =>
        // here `_` is Lodash, not the element
        _.meanBy(weighted, vec => vec[idx])
      );
      console.log("User profile vector:", userProfile);

      // 9) Score unseen items by cosine similarity & return top 10
      const seen = new Set(userRatings.map(r => r.item_id));
      const recommendations = itemVectors
        .filter(iv => !seen.has(iv.item_id))
        .map(iv => {
          const dot  = iv.vector.reduce((sum, v, i) => sum + v * userProfile[i], 0);
          const magA = Math.sqrt(iv.vector.reduce((s, v) => s + v*v, 0));
          const magB = Math.sqrt(userProfile.reduce((s, v) => s + v*v, 0));
          const score = magA && magB ? dot/(magA*magB) : 0;
          const item = items.find(item => item.item_id === iv.item_id);
          console.log(item.item_id, item.title, iv.vector, score);
          return {
            item_id: item.item_id,
            title: item.title,
            description: item.description,
            content_type: item.content_type,
            release_date: item.release_date,
            image_url: item.image_url,
            genre_name: item.genre_name,
            rating: item.rating, // Average rating
            average_sentiment: item.average_sentiment, // Average sentiment
            score, // Recommendation score
          };
        })
        .sort((a, b) => b.score - a.score)
        .slice(0, 20);
      console.log("Recommendations:", recommendations);

      return res.json(recommendations);
    } catch (err) {
      console.error("Rec error:", err);
      return res.status(500).json({ error: "Failed to generate recommendations" });
    } finally {
      client.release();
    }
  }

  // — Fallback for anonymous users: original catalog listing —
  try {
    const result = await pool.query(`
      SELECT
          ci.item_id,
          ci.title,
          ci.description,
          ci.content_type,
          ci.release_date,
          ci.image_url,
          g.name                AS genre_name,
          COALESCE(AVG(r.rating_value), 0)      AS rating,
          COALESCE(AVG(rev.sentiment_score), 0) AS average_sentiment
        FROM ContentItem ci
        JOIN Genre g ON g.genre_id = ci.genre_id
        LEFT JOIN Rating r   ON r.item_id    = ci.item_id
        LEFT JOIN Review rev ON rev.item_id  = ci.item_id
        WHERE ci.content_type = $1
        GROUP BY
          ci.item_id, ci.title, ci.description,
          ci.content_type, ci.release_date,
          ci.image_url, g.name
    `, [canonicalType]);
    return res.json(result.rows);
  } catch (error) {
    console.error("Error fetching content:", error);
    return res.status(500).json({ error: "Internal Server Error" });
  }
});

app.get("/users/similar", isAuthenticated, async (req, res) => {
  const { userId } = req.session;

  try {
    const client = await pool.connect();

    // 1) Fetch all users' ratings
    const { rows: allRatings } = await client.query(`
      SELECT r.user_id, r.item_id, r.rating_value, ci.genre_id, ci.description
      FROM Rating r
      JOIN ContentItem ci ON ci.item_id = r.item_id
    `);

    // 2) Group ratings by user
    const userRatingsMap = _.groupBy(allRatings, "user_id");

    // 3) Compute user vectors
    const userVectors = Object.entries(userRatingsMap).map(([otherUserId, ratings]) => {
      // Build TF-IDF model for this user's rated items
      const tfidf = new natural.TfIdf();
      ratings.forEach(r => tfidf.addDocument(r.description || "", String(r.item_id)));

      // Build vocabulary
      const termSet = new Set();
      ratings.forEach((_, idx) => {
        tfidf.listTerms(idx).forEach(({ term }) => termSet.add(term));
      });
      const vocab = Array.from(termSet);

      // One-hot encode genres
      const genreIds = _.uniq(ratings.map(r => r.genre_id));
      const genreIndex = Object.fromEntries(genreIds.map((g, i) => [g, i]));

      // Normalize function
      const normalize = vec => {
        const magnitude = Math.sqrt(vec.reduce((sum, val) => sum + val * val, 0));
        return magnitude ? vec.map(val => val / magnitude) : vec;
      };

      // Compute vector
      const vector = ratings.map((r, idx) => {
        const descVec = normalize(vocab.map(term => tfidf.tfidf(term, idx)));
        const genreVec = Array(genreIds.length).fill(0);
        genreVec[genreIndex[r.genre_id]] = 1;
        return [...descVec, ...genreVec].map(value => value * r.rating_value);
      });

      // Average the vector dimensions
      const userVector = vector[0].map((_, idx) => _.meanBy(vector, vec => vec[idx]));

      return { userId: otherUserId, vector: userVector };
    });

    // 4) Get the logged-in user's vector
    const loggedInUserVector = userVectors.find(uv => uv.userId === userId)?.vector;
    if (!loggedInUserVector) {
      return res.status(404).json({ error: "No ratings found for the logged-in user" });
    }

    // 5) Compute cosine similarity with other users
    const similarUsers = userVectors
      .filter(uv => uv.userId !== userId) // Exclude the logged-in user
      .map(uv => {
        const dot = uv.vector.reduce((sum, v, i) => sum + v * loggedInUserVector[i], 0);
        const magA = Math.sqrt(uv.vector.reduce((s, v) => s + v * v, 0));
        const magB = Math.sqrt(loggedInUserVector.reduce((s, v) => s + v * v, 0));
        const score = magA && magB ? dot / (magA * magB) : 0;
        return { userId: uv.userId, similarity: score };
      })
      .sort((a, b) => b.similarity - a.similarity) // Sort by similarity
      .slice(0, 10); // Return top 10 similar users

    // 6) Fetch usernames for similar users
    const userIds = similarUsers.map(u => u.userId);
    const { rows: userDetails } = await client.query(
      `SELECT user_id, username FROM Users WHERE user_id = ANY($1)`,
      [userIds]
    );

    // Map usernames to the results
    const results = similarUsers.map(u => ({
      userId: u.userId,
      username: userDetails.find(d => d.user_id === u.userId)?.username || "Unknown",
      similarity: u.similarity,
    }));

    res.json(results);
  } catch (error) {
    console.error("Error fetching similar users:", error);
    res.status(500).json({ error: "Internal Server Error" });
  }
});